00001  0000             ; 10 SYS (2304)
00002  0001             WATCH      $0001
00003  0001             WATCH      $0002
00004  0001             WATCH      $0003
00005  0001             WATCH      $FB
00006  0001             WATCH      $FC
00007  0001             WATCH      $0401
00008  0001             
00009  0001             *=$0900
00010  0900             ;FIRST BASIC PROGRAM
00011  0900             
00012  0900             ;SET UP A FALSE BYTE ONE TO SIMULATE ON A DEBUGGER THE BYTE 1
00013  0900  A9 FF                 LDA #$FF ; ALL ONES ON THE MEMORY POSITION 1 TO SWITCH IN THE KERNEL AND CHARCTER CODE AND BASIC
00014  0902  85 01                 STA 1
00015  0904             ;STORE A MEMORY POSITION TO WRITE OR READ DATA AT 251 AND 251 LOW AND HIGHT BYTE
00016  0904             ;USING 0401 TO INFLUENCE ON THE SCREEN
00017  0904  A9 01                 LDA #$01
00018  0906  85 FB                 STA $FB
00019  0908  A9 04                 LDA #$04
00020  090A  85 FC                 STA $FC
00021  090C  A9 AA                 LDA #$AA
00022  090E  8D 01 04              STA $0401
00023  0911             
00024  0911             ;SET ACCUMULATOR ON ZERO
00025  0911  A9 00                 LDA #$00
00026  0913             
00027  0913             
00028  0913             ;PEEK TO READ THE DESIRED BYTE USING ADDRESS $FD TO HAVE THE ADDRESS FOR INDIRECT ADDRESSING
00029  0913             ;10 DATA 120, 165, 1, 41, 252, 133, 1, 160, 0, 177, 251, 133,2, 165, 1, 9, 3, 133, 1, 88, 96
00030  0913             
00031  0913  78                    SEI     ;SET INTERRUPT FLAG
00032  0914                        ;LETS SWAP OUT THE ROM, CHARRACTER AND KERNEL MEMORIES
00033  0914  A5 01                 LDA $1   ;LOAD ACUMMULATOR WITH MEMORY REGISTER AT 1 MEMORY POSITION
00034  0916  29 FC                 AND #$FC  ;CHANGE ACCUMULATOR TURNING OFF BITS 6 Y 7 1111 1100 TO GET 62K OF FREE MEMORY FC=252
00035  0918  85 01                 STA $1   ;SAVE THE CHANGED MEMORY ADDRESS AT THE MEMORY REGISTER
00036  091A                        ;PEEK THE VALUE ON THE OVERLAPPED MEMORY POSTION
00037  091A  A0 00                 LDY #$0   ;TO LOAD Y FOR AN INDRECT OF LDA
00038  091C  B1 FB                 LDA ($FB),Y     ;LOAD WHAT IS IN MEMORY POSITION 251 THE VALUE THAT WE WANT TO SAVE
00039  091E                        ;MEMORY POSITION 251 IS FB ADN FC THE ADDRESS IS A POINTER
00040  091E  85 02                 STA $2   ;SAVE THE VALUE IN BYTE 2 SO WE CAN RETRIEVE IT EASILY
00041  0920                        ;LETS SWAP IN THE ROM, CHARACTER AND KERNEL MEMORIES
00042  0920  A5 01                 LDA $1
00043  0922  09 03                 ORA #$3   ;CHANGE THE ACUMMULATOR AND TURN ON BITS 6 AND 7
00044  0924  85 01                 STA $1   ;STORE THE MEMORY REGISTER AT POSITION 1
00045  0926                        ;ALLOW INTERRUPTS AGAIN
00046  0926  58                    CLI     ;CLEAR INTERRUPT FLAG
00047  0927  60                    RTS
00048  0928             
00049  0928             
00050  0928             *=$0950
00051  0950             ;POKE TO WRITE THE DESIRED BYTE USING ADDRESS $FD TO HAVE THE ADDRESS FOR INDIRECT ADDRESSING
00052  0950             ;20 DATA 120, 165, 1, 41, 252, 133, 1, 160, 0, 165, 2, 145, 251, 165, 1, 9, 3, 133, 1, 88, 96
00053  0950             
00054  0950             
00055  0950             ;SET UP A FALSE BYTE ONE TO SIMULATE ON A DEBUGGER THE BYTE 1
00056  0950  A9 FF                 LDA #$FF ; ALL ONES ON THE MEMORY POSITION 1 TO SWITCH IN THE KERNEL AND CHARCTER CODE AND BASIC
00057  0952  85 01                 STA 1
00058  0954             ;STORE A MEMORY POSITION TO WRITE OR READ DATA AT 251 AND 251 LOW AND HIGHT BYTE
00059  0954             ;USING 0401 TO INFLUENCE ON THE SCREEN
00060  0954  A9 01                 LDA #$01
00061  0956  85 FB                 STA $FB
00062  0958  A9 04                 LDA #$04
00063  095A  85 FC                 STA $FC
00064  095C  A9 AB                 LDA #$AB        ;LOAD ON BYTE TWO AB TO POKE INTO THE MEMORY POSITION
00065  095E  85 02                 STA $2
00066  0960             
00067  0960             ;SET ACCUMULATOR ON ZERO
00068  0960  A9 00                 LDA #$00
00069  0962             
00070  0962             
00071  0962  78                    SEI     ;SET INTERRUPT FLAG
00072  0963                        ;LETS SWAP OUT THE ROM, CHARRACTER AND KERNEL MEMORIES
00073  0963  A5 01                 LDA $1   ;LOAD ACUMMULATOR WITH MEMORY REGISTER AT 1 MEMORY POSITION
00074  0965  29 FC                 AND #$FC  ;CHANGE ACCUMULATOR TURNING OFF BITS 6 Y 7 1111 1100 TO GET 62K OF FREE MEMORY FC=252
00075  0967  85 01                 STA $1   ;SAVE THE CHANGED MEMORY ADDRESS AT THE MEMORY REGISTER
00076  0969                        ;POKE THE VALUE ON THE OVERLAPPED MEMORY POSTION
00077  0969  A0 00                 LDY #$0   ;TO LOAD Y FOR AN INDRECT OF LDA
00078  096B  A5 02                 LDA $2   ;LOAD ACUMMULATOR WITH THE VALUE ON BYTE 2
00079  096D  91 FB                 STA ($FB),Y     ;SAVE TO THE INDIRECT DIRECTION STARTING THE LOW BYT ON $FB AND HIGH BYTE $FC (251 AND 252)
00080  096F                        ;LETS SWAP IN THE ROM, CHARACTER AND KERNEL MEMORIES
00081  096F  A5 01                 LDA $1
00082  0971  09 03                 ORA #$3   ;CHANGE THE ACUMMULATOR AND TURN ON BITS 6 AND 7
00083  0973  85 01                 STA $1   ;STORE THE MEMORY REGISTER AT POSITION 1
00084  0975                        ;ALLOW INTERRUPTS AGAIN
00085  0975  58                    CLI     ;CLEAR INTERRUPT FLAG
00086  0976  60                    RTS
00087  0977             

******* 0 Label(s) *******

******* 0 Unused label(s) *******

******* 1 Variable(s) *******
tgt_c64  = $0001
******* 1 Unused variables(s) *******
tgt_c64

